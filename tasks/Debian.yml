---
# --------------------------------
# https://aws.amazon.com/premiumsupport/knowledge-center/ec2-static-dns-ubuntu-debian/

- name: "Debian : Install packages"
  ansible.builtin.apt:
    name: "{{ dnsmasq_pkg_names }}"
    state: "{{ dnsmasq_state }}"
    update_cache: "{{ dnsmasq_update_cache }}"
  become: true
  tags: [ct-dnsmasq]

- name: "Get status of old resolver file (check_mode=false)"
  ansible.builtin.stat:
    path: "{{ dnsmasq_resolv_conf }}"
  check_mode: false
  register: stat_resolver
  tags: [ct-dnsmasq]

- name: "Remove old resolver file if it is a symlink"
  ansible.builtin.file:
    path: "{{ dnsmasq_resolv_conf }}"
    state: absent
  when:
  - (stat_resolver.stat.islnk is defined and stat_resolver.stat.islnk) or (stat_resolver.stat.isfile is defined and stat_resolver.stat.isfile)
  notify: RestartDnsmasq
  become: true
  tags: [ct-dnsmasq]

- name: "Render Dnsmasq config file"
  ansible.builtin.template:
    src: default.j2
    dest: "{{ dnsmasq_cfg_dir }}/{{ dnsmasq_cfg_file }}"
    group: root
    mode: "0644"
    owner: root
  notify: RestartDnsmasq
  become: true
  tags: [ct-dnsmasq]

- name: "Render resolver config for AWS"
  ansible.builtin.template:
    src: resolv.conf.aws.j2
    dest: "{{ dnsmasq_resolv_conf }}"
    group: root
    mode: "0644"
    owner: root
  when: "'aws' in group_names"
  notify: RestartDnsmasq
  become: true
  tags: [ct-dnsmasq]

- name: "Render generic resolver config"
  ansible.builtin.template:
    src: resolv.conf.basic.j2
    dest: "{{ dnsmasq_resolv_conf }}"
    group: root
    mode: "0644"
    owner: root
  when: "'aws' not in group_names"
  notify: RestartDnsmasq
  become: true
  tags: [ct-dnsmasq]

- name: "Render details of fallback resolver"
  ansible.builtin.template:
    src: forwarding_nameserver.j2
    dest: "{{ dnsmasq_fallback_conf }}"
    group: root
    mode: "0644"
    owner: root
  notify: RestartDnsmasq
  become: true
  tags: [ct-dnsmasq]

- name: "Block around systemd resolver service"
  block:
  - name: "Ubuntu : Disable and mask systemd resolver service"
    ansible.builtin.systemd:
      name: systemd-resolved.service
      enabled: false
      masked: true
    register: reg_resolver
    notify: RebootServer
    become: true
    tags: [ct-dnsmasq]
  rescue:
  - name: "Error handler"
    ansible.builtin.debug:
      var: reg_resolver
    notify: RebootServer
    become: true
    tags: [ct-dnsmasq]

# --------------------------------
...
